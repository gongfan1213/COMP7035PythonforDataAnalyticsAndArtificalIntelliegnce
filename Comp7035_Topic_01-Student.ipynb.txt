{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U7eis3REbE5E"
      },
      "source": [
        "## Lab Demo COMP7035 Week 1\n",
        "### Objective\n",
        "- Use of the \"print\" command  \n",
        "- Use of the variable  \n",
        "- Use of different operators  \n",
        "- The basic of control statement  \n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lfkAI1QWbE5F",
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      },
      "source": [
        "### Print a message"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GlklTqHKbE5F",
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "outputId": "c5c39910-29b4-4eb9-9c9b-ada1ff5461d1",
        "tags": []
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "How to pass this course?\n"
          ]
        }
      ],
      "source": [
        "print(\"How to pass this course?\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vEHJbPw8bE5H"
      },
      "source": [
        "### Try the two examples below"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RnDOvILnbE5H",
        "outputId": "67f4ee56-028d-4cbe-beeb-50b307889e4b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "3.141592653589793\n",
            "1\n"
          ]
        }
      ],
      "source": [
        "import math\n",
        "\n",
        "print(math.pi)\n",
        "print(math.floor(1.5))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EUKxRyk8bE5H",
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      },
      "source": [
        "### Arithmetic Operators:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PFK8MSCwbE5H",
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "outputId": "774269ea-faf5-450e-c85c-d26393f62d0b",
        "tags": []
      },
      "outputs": [],
      "source": [
        "## Print \"40+20\"\n",
        "print(\"[Continuous Assessment]\")\n",
        "print(\"(Labs/Assignments + Practical Test(s))\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2IERKR1IbE5H",
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "outputId": "dc9a6e5b-f6a6-436b-d7e1-d67070757076",
        "tags": []
      },
      "outputs": [],
      "source": [
        "## Please Print 80 * 0.4 + 60 * 0.2\n",
        "print(\"[Continuous Assessment]\")\n",
        "print(\"Your score: \")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R5dm3nbvbE5I"
      },
      "source": [
        "##### addition"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Jv_Owu8AbE5I"
      },
      "outputs": [],
      "source": [
        "val1 = 2\n",
        "val2 = 3\n",
        "\n",
        "# using the addition operator"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FryQ-qjybE5I"
      },
      "source": [
        "##### subtraction"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Wp7aLgvbbE5I"
      },
      "outputs": [],
      "source": [
        "val1 = 2\n",
        "val2 = 3\n",
        "\n",
        "# using the subtraction operator"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OXSimAMebE5I"
      },
      "source": [
        "##### multiplication"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "C-z5l8_pbE5I"
      },
      "outputs": [],
      "source": [
        "val1 = 2\n",
        "val2 = 3\n",
        "\n",
        "# using the multiplication operator"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bqZoqH3ZbE5I"
      },
      "source": [
        "##### division"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Z0mGC2A-bE5J"
      },
      "outputs": [],
      "source": [
        "\n",
        "val1 = 3\n",
        "val2 = 2\n",
        "\n",
        "# using the division operator"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6R1zbJTXbE5J"
      },
      "source": [
        "##### modulus"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tNLV0ZiwbE5J"
      },
      "outputs": [],
      "source": [
        "val1 = 3\n",
        "val2 = 2\n",
        "\n",
        "# using the modulus operator"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9nHL03JtbE5J"
      },
      "source": [
        "##### exponentiation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DRNAY_WcbE5J"
      },
      "outputs": [],
      "source": [
        "val1 = 2\n",
        "val2 = 3\n",
        "\n",
        "# using the exponentiation operator"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sU4qw5EtbE5J"
      },
      "source": [
        "##### floor"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "m1U2JmlobE5J"
      },
      "outputs": [],
      "source": [
        "val1 = 3\n",
        "val2 = 2\n",
        "\n",
        "# using the floor division"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TWopnTzpbE5J",
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      },
      "source": [
        "### Variables:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WauGg3cJbE5J",
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "outputId": "d0332fb8-b290-4ce2-d7d9-071f7c4b41c0",
        "tags": []
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[Continuous Assessment]\n",
            "Someone's score: 44.1\n"
          ]
        }
      ],
      "source": [
        "name = \"Someone\"      # text string\n",
        "assignments = 80    # integer number\n",
        "test = 60.5      # float number\n",
        "\n",
        "ca = assignments * 0.4 + test * 0.2\n",
        "\n",
        "print(\"[Continuous Assessment]\")\n",
        "print(name + \"'s score: \", end=\"\")\n",
        "print(ca)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "A-NJ3FRibE5K"
      },
      "outputs": [],
      "source": [
        "# Your turn\n",
        "# Try to type the above code and change the value of the variables e.g. name=\"NotMe\"\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JSDy63K8bSga"
      },
      "source": [
        "### Strings"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "urfh5Nr1bE5K"
      },
      "source": [
        "**Multiline Strings**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yZEuYhxgbE5K"
      },
      "outputs": [],
      "source": [
        "a = \"\"\"Lorem ipsum dolor sit amet,\n",
        "consectetur adipiscing elit,\n",
        "sed do eiusmod tempor incididunt\n",
        "ut labore et dolore magna aliqua.\"\"\"\n",
        "print(a)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a0d8CHsNbZiE"
      },
      "source": [
        "**capitalize()**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BGVHxfsTbE5K"
      },
      "outputs": [],
      "source": [
        "txt = \"hello, and welcome to my world.\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NSM_pH2obdeB"
      },
      "source": [
        "**count()**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dZMr6HYMbE5K"
      },
      "outputs": [],
      "source": [
        "txt = \"I love apples, apple are my favorite fruit\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bmfMT2yNbg6f"
      },
      "source": [
        "**isdigit()**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yyEdTMq_bE5K"
      },
      "outputs": [],
      "source": [
        "txt = \"50800\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AVBXnXcVbs0q"
      },
      "source": [
        "**replace**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Yq24HJ5ubE5K"
      },
      "outputs": [],
      "source": [
        "txt = \"I like bananas\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ca3Mli_kb23N"
      },
      "source": [
        "**String concatenation**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7B_NRMUCbE5L",
        "outputId": "fd9d0200-c35d-4c6a-8952-b25ad711eccd"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "HelloWorld\n"
          ]
        }
      ],
      "source": [
        "a = \"Hello\"\n",
        "b = \"World\"\n",
        "c = a + b\n",
        "print(c)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "## How can print Hello World by changing the variable c above?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cKW3x6z_bE5L",
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      },
      "source": [
        "### Example 1: Exam score has to be not less than 30"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "elkFxkf9bE5L",
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "outputId": "e13bb673-0299-43b9-976b-f7aa2b4d6ec2",
        "tags": []
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "You fail😭\n"
          ]
        }
      ],
      "source": [
        "exam = 25\n",
        "\n",
        "if exam < 30:\n",
        "    print(\"You fail😭\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WfAALYKJbE5M",
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      },
      "source": [
        "### Example 2: Overall score has to be not less than 35"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3KTr0uylbE5M",
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "outputId": "34590be1-9582-4eaf-e3b1-b751ebd6576a",
        "tags": []
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "52.1\n",
            "You Pass😁\n"
          ]
        }
      ],
      "source": [
        "assignments = 70    # integer number\n",
        "test = 60.5      # float number\n",
        "exam = 30\n",
        "overall = assignments * 0.4 + test * 0.2 + exam * 0.4\n",
        "print(overall)\n",
        "if overall >= 35:\n",
        "    print(\"You Pass😁\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "u5pntCiLbE5M",
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "outputId": "2abd5b44-9394-4702-90b4-d19f68a57746",
        "tags": []
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Thanks for your hard work\n"
          ]
        }
      ],
      "source": [
        "assignments = 70    # integer number\n",
        "test = 60.5      # float number\n",
        "exam = 30\n",
        "overall = assignments * 0.4 + test * 0.2 + exam * 0.4\n",
        "\n",
        "if overall < 35:\n",
        "    print(\"You fail😭\")\n",
        "    print(\"You'll have to retake.\")\n",
        "\n",
        "print(\"Thanks for your hard work\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kyLGLrTIbE5M",
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      },
      "source": [
        "We can combine them into one statement."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FgUsIUurbE5M",
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "tags": []
      },
      "outputs": [],
      "source": [
        "if exam < 30 or overall < 35:\n",
        "    print(\"You fail😭 🤟 🙉\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZR1TX6Z60A_Z"
      },
      "source": [
        "## Exercise-0"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nksB_UiXbE5N",
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      },
      "source": [
        "**Based on Example-1 and Example-2, please write a code using if else to judge whether you fail or pass the examination.**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vfTd79LxbE5N",
        "jupyter": {
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "tags": []
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x6drxnnibE5N"
      },
      "source": [
        "## Exercise-1"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AvpSP-HhcXmp"
      },
      "source": [
        "**Judge whether the given year is a leap year**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GNZVtwJXbE5N",
        "outputId": "c9ff0a44-6f98-4510-b6e2-bfc66dc35f0c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "2000 is a leap year.\n"
          ]
        }
      ],
      "source": [
        "year = 2000\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h3Ku3LTTcGP9"
      },
      "source": [
        "**Write a program that prints the largest of three given numbers**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "n_-HTlahbE5N"
      },
      "outputs": [],
      "source": [
        "num1 = 1\n",
        "num2 = 3\n",
        "num3 = 4\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LH4jWIXabE5N",
        "tags": []
      },
      "source": [
        "## Exercise-2\n",
        "### You can use any Python style or techniques to complete the exercise!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VZkhtYtmbE5N"
      },
      "source": [
        "Write a Python program to calculate the ROI (Return of investment) with the steps below\n",
        "- Create a variable earning and assign it value to 3765432.\n",
        "- Create the variable invest and assign it value to 1000000.\n",
        "- Create the variable roi and assign the formula  \n",
        "## $roi = \\frac{Earnings - Invest}{Invest}$  \n",
        "You can find more Markdown syntax about writing mathematical expressions [here](https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/writing-mathematical-expressions)\n",
        "- Display the result\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dNhNUa4ibE5O"
      },
      "outputs": [],
      "source": [
        "# Please write you code here"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eyJEOnZybE5O"
      },
      "source": [
        "Write a Python program to get the user input as a string and output the result in uppercase, lowercase and title.  \n",
        "You may find the input() function [here](https://www.w3schools.com/python/ref_func_input.asp).  \n",
        "You may also find the String methods [here](https://www.w3schools.com/python/python_ref_string.asp)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Wz45NcVNbE5O"
      },
      "outputs": [],
      "source": [
        "# Please write your code here"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "gist_id": "dbb78dff8f6a4ff66120060bcc358f57",
    "kernel_info": {
      "name": "python3"
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.7"
    },
    "nteract": {
      "version": "0.28.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
